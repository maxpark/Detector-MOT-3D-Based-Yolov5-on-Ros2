// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track_frame.proto

#ifndef PROTOBUF_INCLUDED_track_5fframe_2eproto
#define PROTOBUF_INCLUDED_track_5fframe_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_track_5fframe_2eproto 

namespace protobuf_track_5fframe_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_track_5fframe_2eproto
namespace probf {
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class TrackFrame;
class TrackFrameDefaultTypeInternal;
extern TrackFrameDefaultTypeInternal _TrackFrame_default_instance_;
}  // namespace probf
namespace google {
namespace protobuf {
template<> ::probf::Person* Arena::CreateMaybeMessage<::probf::Person>(Arena*);
template<> ::probf::TrackFrame* Arena::CreateMaybeMessage<::probf::TrackFrame>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace probf {

// ===================================================================

class Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:probf.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Person* other);
  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(NULL);
  }

  Person* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double px = 1;
  void clear_px();
  static const int kPxFieldNumber = 1;
  double px() const;
  void set_px(double value);

  // double py = 2;
  void clear_py();
  static const int kPyFieldNumber = 2;
  double py() const;
  void set_py(double value);

  // double vx = 3;
  void clear_vx();
  static const int kVxFieldNumber = 3;
  double vx() const;
  void set_vx(double value);

  // double vy = 4;
  void clear_vy();
  static const int kVyFieldNumber = 4;
  double vy() const;
  void set_vy(double value);

  // double sx = 5;
  void clear_sx();
  static const int kSxFieldNumber = 5;
  double sx() const;
  void set_sx(double value);

  // double sy = 6;
  void clear_sy();
  static const int kSyFieldNumber = 6;
  double sy() const;
  void set_sy(double value);

  // @@protoc_insertion_point(class_scope:probf.Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double px_;
  double py_;
  double vx_;
  double vy_;
  double sx_;
  double sy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_track_5fframe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:probf.TrackFrame) */ {
 public:
  TrackFrame();
  virtual ~TrackFrame();

  TrackFrame(const TrackFrame& from);

  inline TrackFrame& operator=(const TrackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackFrame(TrackFrame&& from) noexcept
    : TrackFrame() {
    *this = ::std::move(from);
  }

  inline TrackFrame& operator=(TrackFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackFrame* internal_default_instance() {
    return reinterpret_cast<const TrackFrame*>(
               &_TrackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TrackFrame* other);
  friend void swap(TrackFrame& a, TrackFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackFrame* New() const final {
    return CreateMaybeMessage<TrackFrame>(NULL);
  }

  TrackFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackFrame& from);
  void MergeFrom(const TrackFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .probf.Person person = 4;
  int person_size() const;
  void clear_person();
  static const int kPersonFieldNumber = 4;
  ::probf::Person* mutable_person(int index);
  ::google::protobuf::RepeatedPtrField< ::probf::Person >*
      mutable_person();
  const ::probf::Person& person(int index) const;
  ::probf::Person* add_person();
  const ::google::protobuf::RepeatedPtrField< ::probf::Person >&
      person() const;

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 sec = 2;
  void clear_sec();
  static const int kSecFieldNumber = 2;
  ::google::protobuf::int32 sec() const;
  void set_sec(::google::protobuf::int32 value);

  // int32 nsec = 3;
  void clear_nsec();
  static const int kNsecFieldNumber = 3;
  ::google::protobuf::int32 nsec() const;
  void set_nsec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:probf.TrackFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::probf::Person > person_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 sec_;
  ::google::protobuf::int32 nsec_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_track_5fframe_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person

// double px = 1;
inline void Person::clear_px() {
  px_ = 0;
}
inline double Person::px() const {
  // @@protoc_insertion_point(field_get:probf.Person.px)
  return px_;
}
inline void Person::set_px(double value) {
  
  px_ = value;
  // @@protoc_insertion_point(field_set:probf.Person.px)
}

// double py = 2;
inline void Person::clear_py() {
  py_ = 0;
}
inline double Person::py() const {
  // @@protoc_insertion_point(field_get:probf.Person.py)
  return py_;
}
inline void Person::set_py(double value) {
  
  py_ = value;
  // @@protoc_insertion_point(field_set:probf.Person.py)
}

// double vx = 3;
inline void Person::clear_vx() {
  vx_ = 0;
}
inline double Person::vx() const {
  // @@protoc_insertion_point(field_get:probf.Person.vx)
  return vx_;
}
inline void Person::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:probf.Person.vx)
}

// double vy = 4;
inline void Person::clear_vy() {
  vy_ = 0;
}
inline double Person::vy() const {
  // @@protoc_insertion_point(field_get:probf.Person.vy)
  return vy_;
}
inline void Person::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:probf.Person.vy)
}

// double sx = 5;
inline void Person::clear_sx() {
  sx_ = 0;
}
inline double Person::sx() const {
  // @@protoc_insertion_point(field_get:probf.Person.sx)
  return sx_;
}
inline void Person::set_sx(double value) {
  
  sx_ = value;
  // @@protoc_insertion_point(field_set:probf.Person.sx)
}

// double sy = 6;
inline void Person::clear_sy() {
  sy_ = 0;
}
inline double Person::sy() const {
  // @@protoc_insertion_point(field_get:probf.Person.sy)
  return sy_;
}
inline void Person::set_sy(double value) {
  
  sy_ = value;
  // @@protoc_insertion_point(field_set:probf.Person.sy)
}

// -------------------------------------------------------------------

// TrackFrame

// int32 id = 1;
inline void TrackFrame::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TrackFrame::id() const {
  // @@protoc_insertion_point(field_get:probf.TrackFrame.id)
  return id_;
}
inline void TrackFrame::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:probf.TrackFrame.id)
}

// int32 sec = 2;
inline void TrackFrame::clear_sec() {
  sec_ = 0;
}
inline ::google::protobuf::int32 TrackFrame::sec() const {
  // @@protoc_insertion_point(field_get:probf.TrackFrame.sec)
  return sec_;
}
inline void TrackFrame::set_sec(::google::protobuf::int32 value) {
  
  sec_ = value;
  // @@protoc_insertion_point(field_set:probf.TrackFrame.sec)
}

// int32 nsec = 3;
inline void TrackFrame::clear_nsec() {
  nsec_ = 0;
}
inline ::google::protobuf::int32 TrackFrame::nsec() const {
  // @@protoc_insertion_point(field_get:probf.TrackFrame.nsec)
  return nsec_;
}
inline void TrackFrame::set_nsec(::google::protobuf::int32 value) {
  
  nsec_ = value;
  // @@protoc_insertion_point(field_set:probf.TrackFrame.nsec)
}

// repeated .probf.Person person = 4;
inline int TrackFrame::person_size() const {
  return person_.size();
}
inline void TrackFrame::clear_person() {
  person_.Clear();
}
inline ::probf::Person* TrackFrame::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:probf.TrackFrame.person)
  return person_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::probf::Person >*
TrackFrame::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:probf.TrackFrame.person)
  return &person_;
}
inline const ::probf::Person& TrackFrame::person(int index) const {
  // @@protoc_insertion_point(field_get:probf.TrackFrame.person)
  return person_.Get(index);
}
inline ::probf::Person* TrackFrame::add_person() {
  // @@protoc_insertion_point(field_add:probf.TrackFrame.person)
  return person_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::probf::Person >&
TrackFrame::person() const {
  // @@protoc_insertion_point(field_list:probf.TrackFrame.person)
  return person_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace probf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_track_5fframe_2eproto
